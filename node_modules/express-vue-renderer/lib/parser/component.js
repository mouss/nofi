'use strict';

//
var fs = require('fs');
var camelCase = require('camel-case');
var compiler = require('vue-template-compiler');
var styleParser = require('./style');
var htmlParser = require('./html');
var scriptParser = require('./script');

function componentParser(templatePath, defaults, type) {
    return new Promise(function (resolve, reject) {
        // try to get the component content from the cache
        var cachedComponentContentObject = defaults.cache.get(templatePath);
        if (cachedComponentContentObject) {
            scriptParser(cachedComponentContentObject.parsedContent.script, defaults, type).then(function (parsedScriptObject) {
                cachedComponentContentObject.script = parsedScriptObject;
                cachedComponentContentObject.script.template = cachedComponentContentObject.template;
                resolve(cachedComponentContentObject);
            }).catch(function (error) {
                reject(error);
            });
        } else {
            fs.readFile(templatePath, 'utf-8', function (err, content) {
                if (err) {
                    var error = 'Could Not Find Component, I was expecting it to live here \n' + templatePath + ' \nBut I couldn\'t find it there, \xAF\\_(\u30C4)_/\xAF\n\n';
                    reject(error);
                } else {
                    parseContent(content, templatePath, defaults, type).then(function (contentObject) {
                        // set the cache for the component
                        defaults.cache.set(templatePath, contentObject);
                        resolve(contentObject);
                    }).catch(function (error) {
                        reject(error);
                    });
                }
            });
        }
    });
}

function parseContent(content, templatePath, defaults, type) {
    return new Promise(function (resolve, reject) {
        var templateArray = templatePath.split('/');
        if (templateArray.length === 0) {
            var error = 'I had an error processing component templates. in this file \n' + templatePath;
            console.error(new Error(error));
            reject(error);
        } else if (content) {
            var templateName = templateArray[templateArray.length - 1].replace('.vue', '');

            //Setup official component parser..
            var parsedContent = compiler.parseComponent(content);
            if (!parsedContent.template && !parsedContent.script && !parsedContent.styles) {
                reject(new Error('Could not parse the file at ' + templatePath));
            } else {

                var promiseArray = [htmlParser(parsedContent.template, true), scriptParser(parsedContent.script, defaults, type), styleParser(parsedContent.styles)];

                Promise.all(promiseArray).then(function (resultsArray) {
                    var template = resultsArray[0];
                    var script = resultsArray[1];
                    var style = resultsArray[2];

                    script.template = template;

                    var componentObjectCTOR = {
                        template: template,
                        parsedContent: parsedContent,
                        type: type,
                        style: style,
                        name: camelCase(templateName),
                        script: script
                    };
                    resolve(componentObjectCTOR);
                }).catch(function (error) {
                    reject(error);
                });
            }
        } else {
            reject(new Error('missing content block from ' + templatePath + ' something went wrong with loading the file'));
        }
    });
}

module.exports = componentParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,