'use strict';

var _require = require('../models'),
    DataObject = _require.DataObject;

var Utils = require('../utils');
var babel = require('babel-core');
var stringHash = require('string-hash');

function dataMerge(script, defaults, type) {
    var finalScript = {};
    for (var element in script) {
        if (script.hasOwnProperty(element)) {
            if (element === 'data') {
                (function () {
                    var data = new DataObject(script.data(), defaults.data, type).data;
                    finalScript[element] = function () {
                        return data;
                    };
                })();
            } else {
                finalScript[element] = script[element];
            }
        }
    }
    //FUCK THIS _Ctor property fuck this fucking thing
    //fuck you you fucking fuckstick i cant believe this
    //is the offical vue-loader fix

    if (finalScript.components) {
        finalScript = deleteCtor(finalScript);
    }
    return finalScript;
}

function deleteCtor(script) {
    for (var component in script.components) {
        if (script.components.hasOwnProperty(component)) {
            delete script.components[component]._Ctor;
            if (script.components[component].components) {
                script.components[component] = deleteCtor(script.components[component]);
            }
        }
    }
    return script;
}

function scriptParser(scriptObject, defaults, type) {
    return new Promise(function (resolve, reject) {
        if (!scriptObject && !scriptObject.content) {
            reject(new Error('Missing Script block'));
        } else {
            var options = {
                'presets': ['es2015']
            };
            // caching for babel script string so time spent in babel is reduced
            var cacheKey = stringHash(scriptObject.content);
            var cachedBabelScript = defaults.cache.get(cacheKey);
            if (cachedBabelScript) {
                var finalScript = dataMerge(cachedBabelScript, defaults, type);
                resolve(finalScript);
            } else {
                var babelScript = babel.transform(scriptObject.content, options);
                // const filename = path.join(defaults.rootPath, '/', defaults.component);
                var requireFromStringOptions = {
                    rootPath: defaults.rootPath,
                    defaults: defaults
                };
                Utils.requireFromString(babelScript.code, defaults.component, requireFromStringOptions).then(function (scriptFromString) {
                    // set the cache for the babel script string
                    defaults.cache.set(cacheKey, scriptFromString);

                    var finalScript = dataMerge(scriptFromString, defaults, type);
                    resolve(finalScript);
                }).catch(function (error) {
                    return reject(error);
                });
            }
        }
    });
}

module.exports = scriptParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvc2NyaXB0LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJEYXRhT2JqZWN0IiwiVXRpbHMiLCJiYWJlbCIsInN0cmluZ0hhc2giLCJkYXRhTWVyZ2UiLCJzY3JpcHQiLCJkZWZhdWx0cyIsInR5cGUiLCJmaW5hbFNjcmlwdCIsImVsZW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsImRhdGEiLCJjb21wb25lbnRzIiwiZGVsZXRlQ3RvciIsImNvbXBvbmVudCIsIl9DdG9yIiwic2NyaXB0UGFyc2VyIiwic2NyaXB0T2JqZWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb250ZW50IiwiRXJyb3IiLCJvcHRpb25zIiwiY2FjaGVLZXkiLCJjYWNoZWRCYWJlbFNjcmlwdCIsImNhY2hlIiwiZ2V0IiwiYmFiZWxTY3JpcHQiLCJ0cmFuc2Zvcm0iLCJyZXF1aXJlRnJvbVN0cmluZ09wdGlvbnMiLCJyb290UGF0aCIsInJlcXVpcmVGcm9tU3RyaW5nIiwiY29kZSIsInRoZW4iLCJzZXQiLCJzY3JpcHRGcm9tU3RyaW5nIiwiY2F0Y2giLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O2VBR0lBLFFBQVEsV0FBUixDO0lBREFDLFUsWUFBQUEsVTs7QUFHSixJQUFNQyxRQUFRRixRQUFRLFVBQVIsQ0FBZDtBQUNBLElBQU1HLFFBQVFILFFBQVEsWUFBUixDQUFkO0FBQ0EsSUFBTUksYUFBYUosUUFBUSxhQUFSLENBQW5COztBQVVBLFNBQVNLLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQW1DQyxRQUFuQyxFQUFxREMsSUFBckQsRUFBMkU7QUFDdkUsUUFBSUMsY0FBYyxFQUFsQjtBQUNBLFNBQUssSUFBSUMsT0FBVCxJQUFvQkosTUFBcEIsRUFBNEI7QUFDeEIsWUFBSUEsT0FBT0ssY0FBUCxDQUFzQkQsT0FBdEIsQ0FBSixFQUFvQztBQUNoQyxnQkFBSUEsWUFBWSxNQUFoQixFQUF3QjtBQUFBO0FBQ3BCLHdCQUFJRSxPQUFPLElBQUlYLFVBQUosQ0FBZUssT0FBT00sSUFBUCxFQUFmLEVBQThCTCxTQUFTSyxJQUF2QyxFQUE2Q0osSUFBN0MsRUFBbURJLElBQTlEO0FBQ0FILGdDQUFZQyxPQUFaLElBQXVCO0FBQUEsK0JBQU1FLElBQU47QUFBQSxxQkFBdkI7QUFGb0I7QUFHdkIsYUFIRCxNQUdPO0FBQ0hILDRCQUFZQyxPQUFaLElBQXVCSixPQUFPSSxPQUFQLENBQXZCO0FBQ0g7QUFDSjtBQUNKO0FBQ0Q7QUFDQTtBQUNBOztBQUVBLFFBQUlELFlBQVlJLFVBQWhCLEVBQTRCO0FBQ3hCSixzQkFBY0ssV0FBV0wsV0FBWCxDQUFkO0FBQ0g7QUFDRCxXQUFPQSxXQUFQO0FBQ0g7O0FBRUQsU0FBU0ssVUFBVCxDQUFvQlIsTUFBcEIsRUFBNEM7QUFDeEMsU0FBSyxJQUFJUyxTQUFULElBQXNCVCxPQUFPTyxVQUE3QixFQUF5QztBQUNyQyxZQUFJUCxPQUFPTyxVQUFQLENBQWtCRixjQUFsQixDQUFpQ0ksU0FBakMsQ0FBSixFQUFpRDtBQUM3QyxtQkFBT1QsT0FBT08sVUFBUCxDQUFrQkUsU0FBbEIsRUFBNkJDLEtBQXBDO0FBQ0EsZ0JBQUlWLE9BQU9PLFVBQVAsQ0FBa0JFLFNBQWxCLEVBQTZCRixVQUFqQyxFQUE2QztBQUN6Q1AsdUJBQU9PLFVBQVAsQ0FBa0JFLFNBQWxCLElBQStCRCxXQUFXUixPQUFPTyxVQUFQLENBQWtCRSxTQUFsQixDQUFYLENBQS9CO0FBQ0g7QUFDSjtBQUVKO0FBQ0QsV0FBT1QsTUFBUDtBQUNIOztBQUVELFNBQVNXLFlBQVQsQ0FBc0JDLFlBQXRCLEVBQXNEWCxRQUF0RCxFQUF3RUMsSUFBeEUsRUFBMEc7QUFDdEcsV0FBTyxJQUFJVyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BDLFlBQUksQ0FBQ0gsWUFBRCxJQUFpQixDQUFDQSxhQUFhSSxPQUFuQyxFQUE0QztBQUN4Q0QsbUJBQU8sSUFBSUUsS0FBSixDQUFVLHNCQUFWLENBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxnQkFBTUMsVUFBVTtBQUNaLDJCQUFXLENBQUMsUUFBRDtBQURDLGFBQWhCO0FBR0E7QUFDQSxnQkFBTUMsV0FBV3JCLFdBQVdjLGFBQWFJLE9BQXhCLENBQWpCO0FBQ0EsZ0JBQU1JLG9CQUFvQm5CLFNBQVNvQixLQUFULENBQWVDLEdBQWYsQ0FBbUJILFFBQW5CLENBQTFCO0FBQ0EsZ0JBQUlDLGlCQUFKLEVBQXVCO0FBQ25CLG9CQUFNakIsY0FBY0osVUFBVXFCLGlCQUFWLEVBQTZCbkIsUUFBN0IsRUFBdUNDLElBQXZDLENBQXBCO0FBQ0FZLHdCQUFRWCxXQUFSO0FBQ0gsYUFIRCxNQUdPO0FBQ0gsb0JBQU1vQixjQUFjMUIsTUFBTTJCLFNBQU4sQ0FBZ0JaLGFBQWFJLE9BQTdCLEVBQXNDRSxPQUF0QyxDQUFwQjtBQUNBO0FBQ0Esb0JBQU1PLDJCQUEyQjtBQUM3QkMsOEJBQVV6QixTQUFTeUIsUUFEVTtBQUU3QnpCLDhCQUFVQTtBQUZtQixpQkFBakM7QUFJQUwsc0JBQU0rQixpQkFBTixDQUF3QkosWUFBWUssSUFBcEMsRUFBMEMzQixTQUFTUSxTQUFuRCxFQUE4RGdCLHdCQUE5RCxFQUNLSSxJQURMLENBQ1UsNEJBQW9CO0FBQ3RCO0FBQ0E1Qiw2QkFBU29CLEtBQVQsQ0FBZVMsR0FBZixDQUFtQlgsUUFBbkIsRUFBNkJZLGdCQUE3Qjs7QUFFQSx3QkFBTTVCLGNBQWNKLFVBQVVnQyxnQkFBVixFQUE0QjlCLFFBQTVCLEVBQXNDQyxJQUF0QyxDQUFwQjtBQUNBWSw0QkFBUVgsV0FBUjtBQUNILGlCQVBMLEVBUUs2QixLQVJMLENBUVc7QUFBQSwyQkFBU2pCLE9BQU9rQixLQUFQLENBQVQ7QUFBQSxpQkFSWDtBQVNIO0FBRUo7QUFDSixLQWhDTSxDQUFQO0FBaUNIOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCeEIsWUFBakIiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmNvbnN0IHtcbiAgICBEYXRhT2JqZWN0XG59ID0gcmVxdWlyZSgnLi4vbW9kZWxzJyk7XG5cbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbmNvbnN0IGJhYmVsID0gcmVxdWlyZSgnYmFiZWwtY29yZScpO1xuY29uc3Qgc3RyaW5nSGFzaCA9IHJlcXVpcmUoJ3N0cmluZy1oYXNoJyk7XG5cbnR5cGUgU2NyaXB0T2JqZWN0VHlwZSA9IHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBjb250ZW50OiAnc3RyaW5nJyxcbiAgICBzdGFydDogbnVtYmVyLFxuICAgIGF0dHJzOiBPYmplY3QsXG4gICAgZW5kOiBudW1iZXJcbn1cblxuZnVuY3Rpb24gZGF0YU1lcmdlKHNjcmlwdDogT2JqZWN0LCBkZWZhdWx0czogT2JqZWN0LCB0eXBlOiBzdHJpbmcpOiBPYmplY3Qge1xuICAgIGxldCBmaW5hbFNjcmlwdCA9IHt9O1xuICAgIGZvciAodmFyIGVsZW1lbnQgaW4gc2NyaXB0KSB7XG4gICAgICAgIGlmIChzY3JpcHQuaGFzT3duUHJvcGVydHkoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSAnZGF0YScpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IG5ldyBEYXRhT2JqZWN0KHNjcmlwdC5kYXRhKCksIGRlZmF1bHRzLmRhdGEsIHR5cGUpLmRhdGE7XG4gICAgICAgICAgICAgICAgZmluYWxTY3JpcHRbZWxlbWVudF0gPSAoKSA9PiBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaW5hbFNjcmlwdFtlbGVtZW50XSA9IHNjcmlwdFtlbGVtZW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvL0ZVQ0sgVEhJUyBfQ3RvciBwcm9wZXJ0eSBmdWNrIHRoaXMgZnVja2luZyB0aGluZ1xuICAgIC8vZnVjayB5b3UgeW91IGZ1Y2tpbmcgZnVja3N0aWNrIGkgY2FudCBiZWxpZXZlIHRoaXNcbiAgICAvL2lzIHRoZSBvZmZpY2FsIHZ1ZS1sb2FkZXIgZml4XG5cbiAgICBpZiAoZmluYWxTY3JpcHQuY29tcG9uZW50cykge1xuICAgICAgICBmaW5hbFNjcmlwdCA9IGRlbGV0ZUN0b3IoZmluYWxTY3JpcHQpO1xuICAgIH1cbiAgICByZXR1cm4gZmluYWxTY3JpcHQ7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUN0b3Ioc2NyaXB0OiBPYmplY3QpOiBPYmplY3Qge1xuICAgIGZvciAobGV0IGNvbXBvbmVudCBpbiBzY3JpcHQuY29tcG9uZW50cykge1xuICAgICAgICBpZiAoc2NyaXB0LmNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoY29tcG9uZW50KSkge1xuICAgICAgICAgICAgZGVsZXRlIHNjcmlwdC5jb21wb25lbnRzW2NvbXBvbmVudF0uX0N0b3I7XG4gICAgICAgICAgICBpZiAoc2NyaXB0LmNvbXBvbmVudHNbY29tcG9uZW50XS5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0LmNvbXBvbmVudHNbY29tcG9uZW50XSA9IGRlbGV0ZUN0b3Ioc2NyaXB0LmNvbXBvbmVudHNbY29tcG9uZW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gc2NyaXB0O1xufVxuXG5mdW5jdGlvbiBzY3JpcHRQYXJzZXIoc2NyaXB0T2JqZWN0OiBTY3JpcHRPYmplY3RUeXBlLCBkZWZhdWx0czogT2JqZWN0LCB0eXBlOiBzdHJpbmcpOiBQcm9taXNlIDwgT2JqZWN0ID4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmICghc2NyaXB0T2JqZWN0ICYmICFzY3JpcHRPYmplY3QuY29udGVudCkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignTWlzc2luZyBTY3JpcHQgYmxvY2snKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICdwcmVzZXRzJzogWydlczIwMTUnXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNhY2hpbmcgZm9yIGJhYmVsIHNjcmlwdCBzdHJpbmcgc28gdGltZSBzcGVudCBpbiBiYWJlbCBpcyByZWR1Y2VkXG4gICAgICAgICAgICBjb25zdCBjYWNoZUtleSA9IHN0cmluZ0hhc2goc2NyaXB0T2JqZWN0LmNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkQmFiZWxTY3JpcHQgPSBkZWZhdWx0cy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgICAgICAgaWYgKGNhY2hlZEJhYmVsU2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxTY3JpcHQgPSBkYXRhTWVyZ2UoY2FjaGVkQmFiZWxTY3JpcHQsIGRlZmF1bHRzLCB0eXBlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZpbmFsU2NyaXB0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFiZWxTY3JpcHQgPSBiYWJlbC50cmFuc2Zvcm0oc2NyaXB0T2JqZWN0LmNvbnRlbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5qb2luKGRlZmF1bHRzLnJvb3RQYXRoLCAnLycsIGRlZmF1bHRzLmNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZUZyb21TdHJpbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICByb290UGF0aDogZGVmYXVsdHMucm9vdFBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVXRpbHMucmVxdWlyZUZyb21TdHJpbmcoYmFiZWxTY3JpcHQuY29kZSwgZGVmYXVsdHMuY29tcG9uZW50LCByZXF1aXJlRnJvbVN0cmluZ09wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHNjcmlwdEZyb21TdHJpbmcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBjYWNoZSBmb3IgdGhlIGJhYmVsIHNjcmlwdCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLmNhY2hlLnNldChjYWNoZUtleSwgc2NyaXB0RnJvbVN0cmluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsU2NyaXB0ID0gZGF0YU1lcmdlKHNjcmlwdEZyb21TdHJpbmcsIGRlZmF1bHRzLCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmluYWxTY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNjcmlwdFBhcnNlcjtcbiJdfQ==