'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Models = require('./models');
var path = require('path');
var Utils = require('./utils');
var Renderer = require('./renderer');
var vueServerRenderer = require('vue-server-renderer').createRenderer();

/**
 * ExpressVueRenderer Class is the main init Class
 * init with `new ExpressVueRenderer(options)`
 * returns the ExpressVueRenderer class
 * @class
 */

var ExpressVueRenderer = function () {
    /**
     * ExpressVueRenderer constructor
     * @constructor
     * @param {Object} options - The options passed to init the class
     */
    function ExpressVueRenderer(options) {
        _classCallCheck(this, ExpressVueRenderer);

        this.GlobalOptions = new Models.Defaults(options);
    }
    /**
     * createAppObject is an internal function used by renderToStream
     * @param  {string} componentPath - full path to .vue file
     * @param  {Object} data          - data to be inserted when generating vue class
     * @param  {Object} vueOptions    - vue options to be used when generating head
     * @return {Promise}              - Promise consists of an AppClass Object
     */


    _createClass(ExpressVueRenderer, [{
        key: 'createAppObject',
        value: function createAppObject(componentPath, data, vueOptions) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                _this.GlobalOptions.mergeDataObject(data);
                if (vueOptions) {
                    _this.GlobalOptions.mergeVueObject(vueOptions);
                }
                _this.GlobalOptions.component = componentPath;
                Utils.setupComponent(path.join(_this.GlobalOptions.rootPath, componentPath), _this.GlobalOptions).then(function (component) {

                    var rendered = Renderer.renderHtmlUtil(component);
                    if (!rendered) {
                        reject(new Error('Renderer Error'));
                    } else {
                        var VueClass = rendered.app;
                        var template = _this.GlobalOptions.layout;
                        var script = rendered.scriptString;
                        var head = new Utils.HeadUtils(_this.GlobalOptions.vue, rendered.layout.style);

                        var app = new Models.AppClass(VueClass, template, script, head.toString());
                        resolve(app);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        }
        /**
         * renderToStream is the main function used by res.renderVue
         * @param {string} componentPath - full path to .vue component
         * @param  {Object} data          - data to be inserted when generating vue class
         * @param  {Object} vueOptions    - vue options to be used when generating head
         * @return {Promise}              - Promise returns a Stream
         */

    }, {
        key: 'renderToStream',
        value: function renderToStream(componentPath, data, vueOptions) {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.createAppObject(componentPath, data, vueOptions).then(function (app) {
                    var vueStream = vueServerRenderer.renderToStream(app.VueClass);
                    var htmlStream = void 0;
                    var htmlStringStart = '' + app.template.html.start + app.head + app.template.body.start + app.template.template.start;
                    var htmlStringEnd = '' + app.template.template.end + app.script + app.template.body.end + app.template.html.end;

                    htmlStream = new Utils.StreamUtils(htmlStringStart, htmlStringEnd);
                    htmlStream = vueStream.pipe(htmlStream);

                    resolve(htmlStream);
                }).catch(function (error) {
                    reject(error);
                });
            });
        }
    }]);

    return ExpressVueRenderer;
}();

module.exports = ExpressVueRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,