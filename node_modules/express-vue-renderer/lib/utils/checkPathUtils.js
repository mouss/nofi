'use strict';

var fs = require('fs');
var path = require('path');
var Defaults = require('../models').Defaults;
var paramCase = require('param-case');
var stringHash = require('string-hash');

function getParamCasePath(path) {
    // example /Users/foo/code/test/components/componentFile.vue
    var pathArr = path.split('/');

    // gets the last element componentFile.foo
    var fileName = pathArr[pathArr.length - 1];

    // gets the actual file name componentFile
    var newFileName = fileName.split('.vue')[0];

    // paramcases componentFile to component-file and adds. .vue at the end
    var paramCaseFile = paramCase(newFileName) + '.vue';

    // replaces last element of the array, with the param'd version of the filename
    pathArr[pathArr.length - 1] = paramCaseFile;

    // returns joined pathname with slashes
    return pathArr.join('/').toString();
}

function getCorrectPathForFile(filePath, type, defaults) {
    return new Promise(function (resolve, reject) {
        var resolvedPath = path.join(filePath);
        var cacheKey = stringHash('resolvedPath-' + resolvedPath);
        var cachedResolvedPath = defaults.cache.get(cacheKey);
        if (cachedResolvedPath) {
            resolve(cachedResolvedPath);
        } else {
            fs.access(resolvedPath, (fs.constants || fs).F_OK | (fs.constants || fs).R_OK, function (error) {
                if (error) {
                    if (error.code === 'ENOENT') {
                        fs.access(getParamCasePath(resolvedPath), (fs.constants || fs).F_OK | (fs.constants || fs).R_OK, function (err) {
                            var paramCasePath = '';
                            if (err) {
                                reject(new Error('Could not find ' + type + ' file at ' + (paramCasePath.length > 0 ? paramCasePath : resolvedPath)));
                            } else {
                                paramCasePath = getParamCasePath(resolvedPath);
                                resolve({ path: paramCasePath, type: type });
                            }
                        });
                    }
                } else {
                    var pathObject = { path: resolvedPath, type: type };
                    defaults.cache.set(cacheKey, pathObject);

                    resolve(pathObject);
                }
            });
        }
    });
}

module.exports.getParamCasePath = getParamCasePath;
module.exports.getCorrectPathForFile = getCorrectPathForFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jaGVja1BhdGhVdGlscy5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiRGVmYXVsdHMiLCJwYXJhbUNhc2UiLCJzdHJpbmdIYXNoIiwiZ2V0UGFyYW1DYXNlUGF0aCIsInBhdGhBcnIiLCJzcGxpdCIsImZpbGVOYW1lIiwibGVuZ3RoIiwibmV3RmlsZU5hbWUiLCJwYXJhbUNhc2VGaWxlIiwiam9pbiIsInRvU3RyaW5nIiwiZ2V0Q29ycmVjdFBhdGhGb3JGaWxlIiwiZmlsZVBhdGgiLCJ0eXBlIiwiZGVmYXVsdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc29sdmVkUGF0aCIsImNhY2hlS2V5IiwiY2FjaGVkUmVzb2x2ZWRQYXRoIiwiY2FjaGUiLCJnZXQiLCJhY2Nlc3MiLCJjb25zdGFudHMiLCJGX09LIiwiUl9PSyIsImVycm9yIiwiY29kZSIsImVyciIsInBhcmFtQ2FzZVBhdGgiLCJFcnJvciIsInBhdGhPYmplY3QiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsT0FBT0QsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRSxXQUFXRixRQUFRLFdBQVIsRUFBcUJFLFFBQXRDO0FBQ0EsSUFBTUMsWUFBWUgsUUFBUSxZQUFSLENBQWxCO0FBQ0EsSUFBTUksYUFBYUosUUFBUSxhQUFSLENBQW5COztBQUVBLFNBQVNLLGdCQUFULENBQTBCSixJQUExQixFQUFnRDtBQUM1QztBQUNBLFFBQUlLLFVBQVVMLEtBQUtNLEtBQUwsQ0FBVyxHQUFYLENBQWQ7O0FBRUE7QUFDQSxRQUFJQyxXQUFXRixRQUFRQSxRQUFRRyxNQUFSLEdBQWlCLENBQXpCLENBQWY7O0FBRUE7QUFDQSxRQUFJQyxjQUFjRixTQUFTRCxLQUFULENBQWUsTUFBZixFQUF1QixDQUF2QixDQUFsQjs7QUFFQTtBQUNBLFFBQUlJLGdCQUFnQlIsVUFBVU8sV0FBVixJQUF5QixNQUE3Qzs7QUFFQTtBQUNBSixZQUFRQSxRQUFRRyxNQUFSLEdBQWlCLENBQXpCLElBQThCRSxhQUE5Qjs7QUFFQTtBQUNBLFdBQU9MLFFBQVFNLElBQVIsQ0FBYSxHQUFiLEVBQWtCQyxRQUFsQixFQUFQO0FBQ0g7O0FBR0QsU0FBU0MscUJBQVQsQ0FBK0JDLFFBQS9CLEVBQWlEQyxJQUFqRCxFQUErREMsUUFBL0QsRUFBbUY7QUFDL0UsV0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BDLFlBQU1DLGVBQWVwQixLQUFLVyxJQUFMLENBQVVHLFFBQVYsQ0FBckI7QUFDQSxZQUFNTyxXQUFXbEIsV0FBVyxrQkFBa0JpQixZQUE3QixDQUFqQjtBQUNBLFlBQU1FLHFCQUFxQk4sU0FBU08sS0FBVCxDQUFlQyxHQUFmLENBQW1CSCxRQUFuQixDQUEzQjtBQUNBLFlBQUlDLGtCQUFKLEVBQXdCO0FBQ3BCSixvQkFBUUksa0JBQVI7QUFDSCxTQUZELE1BRU87QUFDSHhCLGVBQUcyQixNQUFILENBQVVMLFlBQVYsRUFBd0IsQ0FBQ3RCLEdBQUc0QixTQUFILElBQWdCNUIsRUFBakIsRUFBcUI2QixJQUFyQixHQUE0QixDQUFDN0IsR0FBRzRCLFNBQUgsSUFBZ0I1QixFQUFqQixFQUFxQjhCLElBQXpFLEVBQStFLFVBQUNDLEtBQUQsRUFBVztBQUN0RixvQkFBSUEsS0FBSixFQUFXO0FBQ1Asd0JBQUlBLE1BQU1DLElBQU4sS0FBZSxRQUFuQixFQUE2QjtBQUN6QmhDLDJCQUFHMkIsTUFBSCxDQUFVckIsaUJBQWlCZ0IsWUFBakIsQ0FBVixFQUEwQyxDQUFDdEIsR0FBRzRCLFNBQUgsSUFBZ0I1QixFQUFqQixFQUFxQjZCLElBQXJCLEdBQTRCLENBQUM3QixHQUFHNEIsU0FBSCxJQUFnQjVCLEVBQWpCLEVBQXFCOEIsSUFBM0YsRUFBaUcsVUFBQ0csR0FBRCxFQUFTO0FBQ3RHLGdDQUFJQyxnQkFBZ0IsRUFBcEI7QUFDQSxnQ0FBSUQsR0FBSixFQUFTO0FBQ0xaLHVDQUFPLElBQUljLEtBQUoscUJBQTRCbEIsSUFBNUIsa0JBQTRDaUIsY0FBY3hCLE1BQWQsR0FBdUIsQ0FBdkIsR0FBMkJ3QixhQUEzQixHQUEyQ1osWUFBdkYsRUFBUDtBQUNILDZCQUZELE1BRU87QUFDSFksZ0RBQWdCNUIsaUJBQWlCZ0IsWUFBakIsQ0FBaEI7QUFDQUYsd0NBQVEsRUFBQ2xCLE1BQU1nQyxhQUFQLEVBQXNCakIsTUFBTUEsSUFBNUIsRUFBUjtBQUNIO0FBQ0oseUJBUkQ7QUFTSDtBQUNKLGlCQVpELE1BWU87QUFDSCx3QkFBTW1CLGFBQWEsRUFBQ2xDLE1BQU1vQixZQUFQLEVBQXFCTCxNQUFNQSxJQUEzQixFQUFuQjtBQUNBQyw2QkFBU08sS0FBVCxDQUFlWSxHQUFmLENBQW1CZCxRQUFuQixFQUE2QmEsVUFBN0I7O0FBRUFoQiw0QkFBUWdCLFVBQVI7QUFDSDtBQUNKLGFBbkJEO0FBb0JIO0FBQ0osS0E1Qk0sQ0FBUDtBQTZCSDs7QUFFREUsT0FBT0MsT0FBUCxDQUFlakMsZ0JBQWYsR0FBa0NBLGdCQUFsQztBQUNBZ0MsT0FBT0MsT0FBUCxDQUFleEIscUJBQWYsR0FBdUNBLHFCQUF2QyIsImZpbGUiOiJjaGVja1BhdGhVdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9tb2RlbHMnKS5EZWZhdWx0cztcbmNvbnN0IHBhcmFtQ2FzZSA9IHJlcXVpcmUoJ3BhcmFtLWNhc2UnKTtcbmNvbnN0IHN0cmluZ0hhc2ggPSByZXF1aXJlKCdzdHJpbmctaGFzaCcpO1xuXG5mdW5jdGlvbiBnZXRQYXJhbUNhc2VQYXRoKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gZXhhbXBsZSAvVXNlcnMvZm9vL2NvZGUvdGVzdC9jb21wb25lbnRzL2NvbXBvbmVudEZpbGUudnVlXG4gICAgbGV0IHBhdGhBcnIgPSBwYXRoLnNwbGl0KCcvJyk7XG5cbiAgICAvLyBnZXRzIHRoZSBsYXN0IGVsZW1lbnQgY29tcG9uZW50RmlsZS5mb29cbiAgICBsZXQgZmlsZU5hbWUgPSBwYXRoQXJyW3BhdGhBcnIubGVuZ3RoIC0gMV07XG5cbiAgICAvLyBnZXRzIHRoZSBhY3R1YWwgZmlsZSBuYW1lIGNvbXBvbmVudEZpbGVcbiAgICBsZXQgbmV3RmlsZU5hbWUgPSBmaWxlTmFtZS5zcGxpdCgnLnZ1ZScpWzBdO1xuXG4gICAgLy8gcGFyYW1jYXNlcyBjb21wb25lbnRGaWxlIHRvIGNvbXBvbmVudC1maWxlIGFuZCBhZGRzLiAudnVlIGF0IHRoZSBlbmRcbiAgICBsZXQgcGFyYW1DYXNlRmlsZSA9IHBhcmFtQ2FzZShuZXdGaWxlTmFtZSkgKyAnLnZ1ZSc7XG5cbiAgICAvLyByZXBsYWNlcyBsYXN0IGVsZW1lbnQgb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBwYXJhbSdkIHZlcnNpb24gb2YgdGhlIGZpbGVuYW1lXG4gICAgcGF0aEFycltwYXRoQXJyLmxlbmd0aCAtIDFdID0gcGFyYW1DYXNlRmlsZTtcblxuICAgIC8vIHJldHVybnMgam9pbmVkIHBhdGhuYW1lIHdpdGggc2xhc2hlc1xuICAgIHJldHVybiBwYXRoQXJyLmpvaW4oJy8nKS50b1N0cmluZygpO1xufVxuXG5cbmZ1bmN0aW9uIGdldENvcnJlY3RQYXRoRm9yRmlsZShmaWxlUGF0aDogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGRlZmF1bHRzOiBEZWZhdWx0cykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHBhdGguam9pbihmaWxlUGF0aCk7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gc3RyaW5nSGFzaCgncmVzb2x2ZWRQYXRoLScgKyByZXNvbHZlZFBhdGgpO1xuICAgICAgICBjb25zdCBjYWNoZWRSZXNvbHZlZFBhdGggPSBkZWZhdWx0cy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgICBpZiAoY2FjaGVkUmVzb2x2ZWRQYXRoKSB7XG4gICAgICAgICAgICByZXNvbHZlKGNhY2hlZFJlc29sdmVkUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcy5hY2Nlc3MocmVzb2x2ZWRQYXRoLCAoZnMuY29uc3RhbnRzIHx8IGZzKS5GX09LIHwgKGZzLmNvbnN0YW50cyB8fCBmcykuUl9PSywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMuYWNjZXNzKGdldFBhcmFtQ2FzZVBhdGgocmVzb2x2ZWRQYXRoKSwgKGZzLmNvbnN0YW50cyB8fCBmcykuRl9PSyB8IChmcy5jb25zdGFudHMgfHwgZnMpLlJfT0ssIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1DYXNlUGF0aCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJHt0eXBlfSBmaWxlIGF0ICR7cGFyYW1DYXNlUGF0aC5sZW5ndGggPiAwID8gcGFyYW1DYXNlUGF0aCA6IHJlc29sdmVkUGF0aH1gKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1DYXNlUGF0aCA9IGdldFBhcmFtQ2FzZVBhdGgocmVzb2x2ZWRQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7cGF0aDogcGFyYW1DYXNlUGF0aCwgdHlwZTogdHlwZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aE9iamVjdCA9IHtwYXRoOiByZXNvbHZlZFBhdGgsIHR5cGU6IHR5cGV9O1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy5jYWNoZS5zZXQoY2FjaGVLZXksIHBhdGhPYmplY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocGF0aE9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0UGFyYW1DYXNlUGF0aCA9IGdldFBhcmFtQ2FzZVBhdGg7XG5tb2R1bGUuZXhwb3J0cy5nZXRDb3JyZWN0UGF0aEZvckZpbGUgPSBnZXRDb3JyZWN0UGF0aEZvckZpbGU7XG4iXX0=