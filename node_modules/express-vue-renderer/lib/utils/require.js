'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Module = require('module');
var path = require('path');
var Utils = require('./index');
var Renderer = require('../renderer');
var Models = require('../models');

var Options = function Options(optsObj) {
    _classCallCheck(this, Options);

    this.vueFileRegex = /([\w/.\-_\d]*\.vue)/igm;
    this.requireRegex = /(require\(')([\w/.\-_\d]*\.vue)('\))/igm;
    this.appendPaths = optsObj.appendPaths || [];
    this.prependPaths = optsObj.prependPaths || [];
    this.rootPath = optsObj.rootPath || '';
    this.defaults = optsObj.defaults || {};
};

function getVueObject(componentPath, rootPath, vueComponentFileMatch) {
    var GlobalOptions = new Models.Defaults({
        rootPath: rootPath,
        component: componentPath
    });
    return new Promise(function (resolve, reject) {
        Utils.setupComponent(componentPath, GlobalOptions).then(function (component) {
            var rendered = Renderer.renderHtmlUtil(component);
            if (!rendered) {
                reject(new Error('Renderer Error'));
            } else {
                resolve({
                    rendered: rendered,
                    match: vueComponentFileMatch
                });
            }
        }).catch(function (error) {
            reject(error);
        });
    });
}

function replaceRelativePaths(code, rootPath) {
    var parentMatches = code.match(/(require\('\.\.\/)/gm);
    var currentMatches = code.match(/(require\('\.\/)/gm);
    if (parentMatches) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = parentMatches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _match = _step.value;

                code = code.replace(_match, 'require(\'' + rootPath + '/../');
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    if (currentMatches) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = currentMatches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _match2 = _step2.value;

                code = code.replace(_match2, 'require(\'' + rootPath + '/./');
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }

    return code;
}

function requireFromString(code) {
    var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var optsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return new Promise(function (resolve, reject) {
        var options = new Options(optsObj);

        if (typeof code !== 'string') {
            throw new Error('code must be a string, not ' + (typeof code === 'undefined' ? 'undefined' : _typeof(code)));
        }
        code = replaceRelativePaths(code, options.rootPath);
        var paths = Module._nodeModulePaths(path.dirname(filename));
        var m = new Module(filename, options.rootPath);
        m.filename = filename;
        m.paths = [].concat(options.prependPaths).concat(paths).concat(options.appendPaths);
        try {
            m._compile(code, filename);
            resolve(m.exports.default);
        } catch (error) {
            //Check if the error is because the file isn't javascript
            if (error.message.includes('Unexpected token')) {
                //find matches for the require paths
                var vueComponentFileMatches = code.match(options.requireRegex);
                if (vueComponentFileMatches && vueComponentFileMatches.length > 0) {
                    //iterate through the matches
                    for (var index = 0; index < vueComponentFileMatches.length; index++) {
                        var vueComponentFileMatch = vueComponentFileMatches[index];
                        //get the file out of the require string
                        //this is because its easier to do string replace later
                        var vueComponentFile = vueComponentFileMatch.match(options.vueFileRegex);
                        if (vueComponentFile && vueComponentFile.length > 0) {
                            getVueObject(vueComponentFile[0], options.rootPath, vueComponentFileMatch).then(function (renderedItem) {
                                var rawString = renderedItem.rendered.scriptStringRaw;
                                code = code.replace(renderedItem.match, rawString);
                                //check if its the last element and then render
                                var last_element = code.match(options.requireRegex);
                                if (last_element === undefined || last_element === null) {
                                    m._compile(code, filename);
                                    resolve(m.exports.default);
                                }
                            }).catch(function (error) {
                                reject(error);
                            });
                        }
                    }
                } else {
                    reject(new Error('Couldnt require component from string: ' + error));
                }
            } else {
                reject(new Error('Couldnt require from string: ' + error));
            }
        }
    });
}

module.exports = requireFromString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,